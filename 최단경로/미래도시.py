'''방문 판매원 A는 많은 회사가 모인 공중 미래도시에 있다. 여기에는 1번부터 N번까지의 회사가 있는데, 특정 회사끼리는 서로 도로를 통해 연결되어있다. 방문 판매원 A는 현재 1번 회사에 있으며, X번 회사에 방문해 물건을 판매하려한다.
도로로 연결된 회사는 양방향으로 이동할 수 있다. 공중 미래도시에서의 도로는 마하의 속도로 사람을 이동시켜주기 때문에, 특정 회사와 다른 회사가 도로로 연결되어있다면, 정확히 1만큼의 시간으로 이동할 수 있다.
또한 오늘 판매원 A는 소개팅에도 가야한다. 소개팅 상대는 K번 회사에 있다. A는 X번 회사에 가서 물건을 판매하기 전에 먼저 소개팅 상대의 회사에 찾아가서 함께 커피를 마실 예정이다. 따라서 방문 판매원 A는 1번 회사에서 출발하여
K번 회사를 방문한 뒤에 X번 회사로 가는 것이 목표다. 이때 방문 판매원 A는 가능한 빠르게 이동하고자 한다. 방문 판매원이 회사 사이를 이동하게 되는 최소 시간을 계산하는 프로그램을 작성하시오.
 정리하면, A는 1 -> K -> X 순으로 이동할 계획이다.
 ( 이 때, 소개팅 상대와의 커피를 마시는 시간은 고려하지 않는다고 가정한다. ) '''

# 첫 째 줄에 전체 회사의 개수 N과 경로의 개수 M이 공백으로 구분되어 차례로 주어진다. ( 1 <= N, M <= 100 )
# 둘 째 줄부터 M+1 번 째 줄에는 연결된 두 회사의 번호가 공백으로 구분되어 주어진다.
# M + 2 번 째 줄에는 X와 K가 공백으로 구분되어 차례대로 주어진다. ( 1<= K <= 100 )
INF = int(1e9)
n, m = map(int, input().split())
graph = [[INF]*(n+1) for i in range(n+1)]

for _ in range(m):
    a, b = map(int, input().split())
    graph[a][b] = 1
    graph[b][a] = 1

for i in range(1, n+1):
    graph[i][i] = 0

x, k = map(int, input().split())

for i in range(1, n+1):
    for j in range(1, n+1):
        if j == i:
            continue
        for k in range(1, n+1):
            if k == i or k == j:
                continue
            if graph[j][k] > graph[j][i] + graph[i][k]:
                graph[j][k] = graph[j][i] + graph[i][k]

if graph[1][k] + graph[k][x] < int(1e9):
    print(graph[1][k] + graph[k][x])
else:
    print(-1)