1. 단순 복사  - shallow  - 완전히 같은 객체! 주소 공유
2. copy.copy() - immutable(불변)한 것들에 대해서는 복사본에서 변경을 하더라도, 원본은 유지됨
               - mutable한 것들에 대해서는 복사본, 원본 모두 변경됨

    ex) a = [1, [1,2,3]] 일 때, b = copy.copy(a) 를 한다면, b=[1, [1,2,3]]이 된다:

          b[0] = 100으로 변경을 해도, b =[100, [1,2,3]]이지만, a = [1, [1,2,3]]으로 유지된다.
          하지만 mutable 한 a리스트 안의 [1,2,3]은, b에서 변경한 것이 a에서도 적용된다.

 즉, b[1].append(4)를 할 경우, b = [100, [1,2,3,4]]가 되고, a = [1, [1,2,3,4]] 가 된다.
  다시 말해, nest list 까지는 deepcopy적용이 되지 않는 것.
copy.copy()를 이용하여 복사할 때, immutable한 것들은 deep copy 되고, list안의 list같은 mutable 한 것들은 주소로 전달되는 것이 아닌가...싶다.



3. copy.deepcopy() - 아예 별개의 객체 생성됨!!
