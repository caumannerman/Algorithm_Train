"""N가지 종류의 화폐가 있다. 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 한다. 이 때 각 화폐는 몇개라도 사용할 수 있으며, 사용한
화폐의 구성은 같지만 순서만 다른 것은 같은 경우로 구분한다. 예를 들어 2원, 3원 단위의 화폐가 있을 때는 15원을 만들기 위해 3원을 5개 사용하는 것이 가장 최소한의 화폐개수이다."""
# 입력 : 첫 째 줄에 N,M이 주어진다. ( 1<=N <= 100, 1<=M <= 10,000 )
# 이후 N개의 줄에는 각 화폐의 가치가 주어진다. 화폐 가치는 10,000보다 작거나 같은 자연수이다.
# 출력 : 첫 째 줄에 M원을 만들기 위한 최소한의 화폐개수를 출력한다.
# 불가능 할 때는 -1을 출력한다.

''' 이전 PS할 떄는, dp = [0] *(m+1)로 초기화를 하고, 각 인덱스미다, 잔돈 종류 수 만큼 이전 인덱스들을 확인하여 값을 갱신해주었는데,

이 코드에서 바뀐 점은 애초에 10001로 두어, 일관적으로 min()연산을 쓰면 되도록 만든 것과,

잔돈 단위마다 해당 금액부터 m원까지 각각 반복문을 수행한다는 점이다.'''
import sys
input = sys.stdin.readline

n ,m =  map(int ,input().split())
data = []

for _ in range(n):
    data.append(int(input()))

dp = [10001] * (m+1)

#for i in range(n):
#    dp[data[i]] =1
# 이렇게 안하고, dp[0] = 0 이라고 해놓고, 2중 for문 안쪽에서 data[i]부터 시작하면 된다. ==> data[i] 즉, 잔돈 단위가 거슬러줘야하는 m보다 클 경우, 반복문이
# for j in range(7,3)과 같은 형태가 되어, 알아서 실행을 안한다.
# 잔돈 단위를 받으며 m보다 큰 경우 제외시키는 방법도 있기는 하다!

dp[0] = 0

for i in range(n):
    for j in range(data[i], m+1):
        if dp[j-data[i]] != 10001:
            dp[j] = min(dp[j], dp[j-data[i]] + 1)
if dp[m] == 10001:
    print(-1)
else:
    print(dp[m])