"""계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다.
<그림 1>과 같이 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.
예를 들어 <그림 2>와 같이 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째 계단을 밟아 도착점에 도달하면 총 점수는 10 + 20 + 25 + 20 = 75점이 된다.
계단 오르는 데는 다음과 같은 규칙이 있다.

계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
마지막 도착 계단은 반드시 밟아야 한다.
따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다.
하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.

각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.
"""
# 입력 : 입력의 첫째 줄에 계단의 개수가 주어진다.
#
# 둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다.
# 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.
# 출력 : 첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최댓값을 출력한다.

''' DP테이블을 진행시키는 과정에서 주의해야할 점.  1. 입력된 갯수 n이 1,2인 경우.
                                         2. 반복문 안의 dp[i]값을 정할 때 dp[i-3]처럼 몇 단계 전 요소까지 참조해야하는지 결정 후 반복문 앞에서 초기화
                                         3. 문제의 조건 확인 --> 이 문제의 경우 마지막 계단을 무조건 밟아야함. ( 각 dp[i]는 i번째 계단을 꼭 밟아야 함)
                                         => 따라서 경우는 2가지로 나뉨 --> (1) 바로 전 계단을 밟은 경우. ==> 전전 계단은 밟았으면, 지금[i]를 못 밟으므로,
                                                                                 dp[i-3] + data[i-1] + data[i]가  됨 
                                                                     (2) 전 계단을 안 밟았고, 전전 계단에서 바로 오는 경우.-->
                                                                               dp[i-2] + data[i]가 됨.
                                                                    이 둘 중 최댓값을 dp[i]에 초기화해주면 됨.
                                                                    앞선 풀이처럼 (전전계단에서 온 경우, 전 계단에서 온 경우 ) 이렇게 튜플로 저장할 필요X'''
n = int(input())
data = [0]
for _ in range(n):
    data.append(int(input()))
if n == 1:
    print(data[1])
    exit()
elif n == 2:
    print(data[1] + data[2])
    exit()

dp = [0]*(n+1)
dp[1] = data[1]
dp[2] = data[1] + data[2]
dp[3] = max(data[1] + data[3], data[2] + data[3])

for i in range(4,n+1):
    dp[i] = max(dp[i-3] + data[i-1] + data[i],  dp[i-2]+ data[i])
print(dp[n])